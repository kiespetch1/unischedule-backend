name: Release on Staging

on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Deploy of release ${{ github.event.release.tag_name }} started
        run: echo Deploy of release ${{ github.event.release.tag_name }} started

      - name: Checkout backend repo
        uses: actions/checkout@v3

      - name: Analyze changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            identity:
              - 'src/Identity/**'
            schedule:
              - 'src/Schedule/**'
            events:
              - 'src/Events/**'
            bot:
              - 'src/Bot/**'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Identity Image
        if: steps.filter.outputs.identity == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Identity/App/UniSchedule.Identity.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/kiespetch1/identity:${{ github.event.release.tag_name }}
            ghcr.io/kiespetch1/identity:latest

      - name: Build and push Schedule Image
        if: steps.filter.outputs.schedule == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Schedule/App/UniSchedule.Schedule.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/kiespetch1/schedule:${{ github.event.release.tag_name }}
            ghcr.io/kiespetch1/schedule:latest

      - name: Build and push Events Image
        if: steps.filter.outputs.events == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Events/App/UniSchedule.Events.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/kiespetch1/events:${{ github.event.release.tag_name }}
            ghcr.io/kiespetch1/events:latest

      - name: Build and push Bot Image
        if: steps.filter.outputs.bot == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Bot/App/UniSchedule.Bot.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/kiespetch1/bot:${{ github.event.release.tag_name }}
            ghcr.io/kiespetch1/bot:latest

      - name: Checkout frontend repository
        uses: actions/checkout@v3
        with:
          repository: kiespetch1/unischedule-frontend-ts
          path: frontend

      - name: Build and push frontend Image
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: ${{ github.workspace }}/frontend/Dockerfile
          push: true
          build-args: |
            VITE_IDENTITY_URL=${{ secrets.VITE_IDENTITY_URL }}
            VITE_SCHEDULE_URL=${{ secrets.VITE_SCHEDULE_URL }}
            VITE_EVENTS_URL=${{ secrets.VITE_EVENTS_URL }}
          tags: |
            ghcr.io/kiespetch1/frontend:${{ github.event.release.tag_name }}
            ghcr.io/kiespetch1/frontend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v3

      - name: Copy docker-compose files and monitoring configs to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}

          source: "docker-compose.yml,monitoring/docker-compose.monitoring.yml,monitoring/prometheus/,monitoring/grafana/"
          target: "~/unischedule-staging"

          strip_components: 1

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd unischedule-staging
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
            cat <<EOF > .env
            ASPNETCORE_ENVIRONMENT=Staging
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            EMAIL=${{ secrets.EMAIL }}
            CURRENT_DOMAIN=${{ secrets.DOMAIN_STAGING }}
            RabbitMqSettings__Host=${{ secrets.RABBITMQ_HOST }}
            RabbitMqSettings__Username=${{ secrets.RABBITMQ_USER }}
            RabbitMqSettings__Password=${{ secrets.RABBITMQ_PASSWORD }}
            JwtTokenSettings__Issuer=${{ secrets.JWT_ISSUER }}
            JwtTokenSettings__Audience=${{ secrets.JWT_AUDIENCE }}
            JwtTokenSettings__Lifetime=${{ secrets.JWT_LIFETIME }}
            JwtTokenSettings__SecurityKey=${{ secrets.JWT_SECURITY_KEY }}
            AdminCredentials__Email=${{ secrets.EMAIL }}
            AdminCredentials__Password=${{ secrets.ADMIN_PASSWORD }}
            AdminCredentials__Surname=${{ secrets.ADMIN_SURNAME }}
            AdminCredentials__Name=${{ secrets.ADMIN_NAME }}
            AdminCredentials__Patronymic=${{ secrets.ADMIN_PATRONYMIC }}
            VITE_IDENTITY_URL=${{ secrets.VITE_IDENTITY_URL }}
            VITE_SCHEDULE_URL=${{ secrets.VITE_SCHEDULE_URL }}
            VITE_EVENTS_URL=${{ secrets.VITE_EVENTS_URL }}
            VkApiSettings__ConfirmationCode=${{ secrets.VkApiSettings__ConfirmationCode }}
            VkApiSettings__AccessToken=${{ secrets.VkApiSettings__AccessToken }}
            CookieSettings__Domain=${{ secrets.DOMAIN_STAGING }}
            GRAFANA_USER=${{ secrets.GRAFANA_USER }}
            GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            EOF
            docker compose -f docker-compose.yml -f docker-compose.monitoring.yml pull
            docker compose -f docker-compose.yml -f docker-compose.monitoring.yml up -d
            
