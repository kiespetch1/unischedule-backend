services:
  traefik:
    image: traefik:v3.1
    container_name: us-traefik
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--entryPoints.vite.address=:3000"

      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.http.http.redirections.entrypoint.permanent=true"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=unischedule_shared-network"
      - "--api=true"

      - "--certificatesResolvers.letsencrypt.acme.caServer=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=unischedule_shared-network"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - shared-network

  frontend:
    build:
      args:
        VITE_IDENTITY_URL: ${IDENTITY_URL}
        VITE_SCHEDULE_URL: ${SCHEDULE_URL}
        VITE_EVENTS_URL: ${EVENTS_URL}
    image: ghcr.io/kiespetch1/frontend:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=https"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.docker.network=unischedule_shared-network"
    networks:
      - shared-network

  identity:
    build:
      context: .
      args:
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    image: ghcr.io/kiespetch1/identity:latest
    environment:
      ConnectionStrings__DefaultConnection: "Host=us-postgres;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=us-identity"
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      RabbitMqSettings__Host: ${RabbitMqSettings__Host}
      RabbitMqSettings__Username: ${RabbitMqSettings__Username}
      RabbitMqSettings__Password: ${RabbitMqSettings__Password}
      JwtTokenSettings__Issuer: ${JwtTokenSettings__Issuer}
      JwtTokenSettings__Audience: ${JwtTokenSettings__Audience}
      JwtTokenSettings__Lifetime: ${JwtTokenSettings__Lifetime}
      JwtTokenSettings__SecurityKey: ${JwtTokenSettings__SecurityKey}
      AdminCredentials__Email: ${AdminCredentials__Email}
      AdminCredentials__Password: ${AdminCredentials__Password}
      AdminCredentials__Surname: ${AdminCredentials__Surname}
      AdminCredentials__Name: ${AdminCredentials__Name}
      AdminCredentials__Patronymic: ${AdminCredentials__Patronymic}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.identity.rule=Host(`identity.${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.identity.entrypoints=https"
      - "traefik.http.routers.identity.tls.certresolver=letsencrypt"
      - "traefik.http.services.identity.loadbalancer.server.port=80"
      - "traefik.docker.network=unischedule_shared-network"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - shared-network

  schedule:
    build:
      context: .
      args:
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    image: ghcr.io/kiespetch1/schedule:latest
    environment:
      ConnectionStrings__DefaultConnection: "Host=us-postgres;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=us-schedule"
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      RabbitMqSettings__Host: ${RabbitMqSettings__Host}
      RabbitMqSettings__Username: ${RabbitMqSettings__Username}
      RabbitMqSettings__Password: ${RabbitMqSettings__Password}
      JwtTokenSettings__Issuer: ${JwtTokenSettings__Issuer}
      JwtTokenSettings__Audience: ${JwtTokenSettings__Audience}
      JwtTokenSettings__Lifetime: ${JwtTokenSettings__Lifetime}
      JwtTokenSettings__SecurityKey: ${JwtTokenSettings__SecurityKey}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.schedule.rule=Host(`schedule.${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.schedule.entrypoints=https"
      - "traefik.http.routers.schedule.tls.certresolver=letsencrypt"
      - "traefik.http.services.schedule.loadbalancer.server.port=80"
      - "traefik.docker.network=unischedule_shared-network"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - shared-network

  events:
    build:
      context: .
      args:
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    image: ghcr.io/kiespetch1/events:latest
    environment:
      ConnectionStrings__DefaultConnection: "Host=us-postgres;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=us-events"
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      RabbitMqSettings__Host: ${RabbitMqSettings__Host}
      RabbitMqSettings__Username: ${RabbitMqSettings__Username}
      RabbitMqSettings__Password: ${RabbitMqSettings__Password}
      JwtTokenSettings__Issuer: ${JwtTokenSettings__Issuer}
      JwtTokenSettings__Audience: ${JwtTokenSettings__Audience}
      JwtTokenSettings__Lifetime: ${JwtTokenSettings__Lifetime}
      JwtTokenSettings__SecurityKey: ${JwtTokenSettings__SecurityKey}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.events.rule=Host(`events.${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.events.entrypoints=https"
      - "traefik.http.routers.events.tls.certresolver=letsencrypt"
      - "traefik.http.services.events.loadbalancer.server.port=80"
      - "traefik.docker.network=unischedule_shared-network"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - shared-network

  postgres:
    container_name: us-postgres
    image: postgres:16.3-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - shared-network

  rabbitmq:
    container_name: us-rabbitmq
    image: rabbitmq:3.13.3-management
    hostname: rabbitmq
    restart: unless-stopped
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RabbitMqSettings__Username}
      RABBITMQ_DEFAULT_PASS: ${RabbitMqSettings__Password}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - shared-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbit.${CURRENT_DOMAIN}`)"
      - "traefik.http.routers.rabbitmq.entrypoints=https"
      - "traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.docker.network=unischedule_shared-network"

networks:
  shared-network:

volumes:
  postgres-data:
  rabbitmq-data:
    driver: local
