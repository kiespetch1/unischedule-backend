// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniSchedule.Schedule.Database;

#nullable disable

namespace UniSchedule.Schedule.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250616172402_AddScheduleFilteringInfo")]
    partial class AddScheduleFilteringInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UniSchedule.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessengerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAddedUsingBot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimeLimited")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("FinishedAt")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("StartedAt")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Subgroup")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WeekType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeekId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeekId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("HasFixedSubgroups")
                        .HasColumnType("boolean");

                    b.Property<int>("LastAcademicWeekNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsedMessenger")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.ScheduleFilteringOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Subgroup")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FilteringInfo");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Week", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Subgroup")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Announcement", b =>
                {
                    b.OwnsOne("UniSchedule.Schedule.Entities.Owned.AnnouncementTargetInfo", "Target", b1 =>
                        {
                            b1.Property<Guid>("AnnouncementId")
                                .HasColumnType("uuid");

                            b1.Property<List<Guid>>("ExcludedDepartments")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.Property<List<int>>("ExcludedGrades")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<List<Guid>>("ExcludedGroups")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.Property<List<Guid>>("IncludedDepartments")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.Property<List<int>>("IncludedGrades")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<List<Guid>>("IncludedGroups")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.HasKey("AnnouncementId");

                            b1.ToTable("Announcements");

                            b1.ToJson("Target");

                            b1.WithOwner()
                                .HasForeignKey("AnnouncementId");
                        });

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Class", b =>
                {
                    b.HasOne("UniSchedule.Schedule.Entities.Day", "Day")
                        .WithMany("Classes")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSchedule.Schedule.Entities.Location", "Location")
                        .WithMany("Classes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSchedule.Schedule.Entities.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Location");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Day", b =>
                {
                    b.HasOne("UniSchedule.Schedule.Entities.Week", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Week");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Week", b =>
                {
                    b.HasOne("UniSchedule.Schedule.Entities.Group", "Group")
                        .WithMany("Weeks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Day", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Group", b =>
                {
                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Location", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Teacher", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("UniSchedule.Schedule.Entities.Week", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
